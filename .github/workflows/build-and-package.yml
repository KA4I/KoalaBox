name: Build and Package
on:
  workflow_call:
    inputs:
      modules:
        description: 'Stringified JSON object listing modules to build'
        required: true
        type: string

      cmake_options:
        required: false
        type: string

      zip_command:
        required: true
        type: string

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  GENERATOR: "Visual Studio 17 2022"

jobs:
  build-project:
    name: Build ${{ matrix.module }} for ${{ matrix.arch }}-bit architecture
    runs-on: windows-2022
    strategy:
      matrix:
        module: ${{ fromJson(inputs.modules) }}
        arch: [ 32, 64 ]
        include:
          - arch: 32
            platform: Win32
            term: amd64_x86

          - arch: 64
            platform: x64
            term: amd64

    env:
      BUILD_DIR: ${{ github.workspace }}\build\${{ matrix.arch }}
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DISABLE_METRICS: true
      MODULE: ${{ matrix.module }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install and cache the latest CMake
        uses: lukka/get-cmake@latest

      - name: Setup Developer Command Prompt for Microsoft Visual C++.
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.term }}

      - name: Restore build files
        uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ hashFiles( 'CMakeLists.txt' ) }}-${{ matrix.arch }}

      - name: Generate build files
        run: >
          cmake -G "${{ env.GENERATOR }}"
          -A "${{ matrix.platform }}"
          -B "${{ env.BUILD_DIR }}"
          ${{ inputs.cmake_options}}

      - name: Build the project
        run: cmake --build ${{ env.BUILD_DIR }} --config Release

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.module }}-${{ matrix.arch }}
          path: ${{ env.BUILD_DIR }}\Release\*.dll

  package-project:
    name: Package the artifacts into a release zip
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-project
    permissions:
      contents: write
    steps:
      - name: Setup version tag
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Setup zip name
        run: echo "ZIP_NAME=$PROJECT_NAME-$VERSION_TAG.zip" >> $GITHUB_ENV

      - name: Install required tools
        run: |
          sudo apt update
          sudo apt install zip tree

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Print artifact tree
        run: tree artifacts

      - name: Make release zip
        run: ${{ inputs.zip_command }}

      - name: Create a release draft
        uses: softprops/action-gh-release@v1
        with:
          body: '# ðŸ“‘ Changelog'
          draft: true
          prerelease: false
          files: ${{ env.ZIP_NAME }}
          name: Release ${{ env.VERSION_TAG }}
          tag_name: ${{ env.VERSION_TAG }}
          fail_on_unmatched_files: true

